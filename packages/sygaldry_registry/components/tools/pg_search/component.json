{
  "$schema": "https://sygaldry.ai/schemas/component.json",
  "name": "pg-search-tool",
  "version": "0.1.0",
  "description": "PostgreSQL database search and query tool with full-text search, connection pooling, and schema introspection",
  "type": "tool",
  "authors": [
    {
      "name": "Sygaldry Project",
      "email": "info@sygaldry.ai"
    }
  ],
  "license": "MIT",
  "repository_url": "https://github.com/greyhaven-ai/sygaldry",
  "mirascope_version_min": "1.24.0",
  "files_to_copy": [
    {
      "source": "tool.py",
      "destination": "tool.py",
      "type": "module"
    },
    {
      "source": "__init__.py",
      "destination": "__init__.py",
      "type": "init_file"
    }
  ],
  "target_directory_key": "tools",
  "python_dependencies": [
    "mirascope[openai]>=1.24.0",
    "pydantic>=2.0.0",
    "asyncpg>=0.29.0"
  ],
  "environment_variables": [],
  "example_usage": "```python\nfrom ai_tools.pg_search import PGSearchTool, query_postgres, search_table\nimport os\n\nasync def main():\n    conn_string = os.getenv(\"DATABASE_URL\")\n    \n    # Execute a custom query\n    result = await query_postgres(\n        connection_string=conn_string,\n        query=\"SELECT * FROM users WHERE created_at > '2024-01-01'\",\n        limit=10\n    )\n    \n    # Search in table columns\n    search_result = await search_table(\n        connection_string=conn_string,\n        table_name=\"products\",\n        search_text=\"laptop\",\n        search_columns=[\"name\", \"description\"]\n    )\n    \n    # Full-text search\n    fts_result = await full_text_search(\n        connection_string=conn_string,\n        table_name=\"articles\",\n        search_text=\"machine learning\",\n        search_columns=[\"title\", \"content\"]\n    )\n```",
  "post_add_instructions": "You can now import the PostgreSQL search tool with `from ai_tools.pg_search import PGSearchTool`. The tool provides safe query execution, full-text search, and connection pooling. Make sure to set your DATABASE_URL or provide the connection string directly.",
  "tags": [
    "postgresql",
    "database",
    "sql",
    "search",
    "full-text-search",
    "data-retrieval"
  ],
  "supports_lilypad": true,
  "template_variables": null,
  "mcp_compatible": false,
  "mcp_entrypoint": ""
}
