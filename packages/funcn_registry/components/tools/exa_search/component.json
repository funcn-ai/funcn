{
  "$schema": "https://funcn.ai/schemas/component.json",
  "name": "exa_search_tools",
  "version": "0.1.0",
  "description": "AI-powered search tools using Exa. Features neural search, direct Q&A, and similarity search with advanced filtering and relevance scoring.",
  "type": "tool",
  "authors": [
    {
      "name": "Funcn Project",
      "email": "info@funcn.ai"
    }
  ],
  "license": "MIT",
  "repository_url": "https://github.com/funcn-ai/funcn",
  "mirascope_version_min": "1.24.0",
  "files_to_copy": [
    {
      "source": "tool.py",
      "destination": "tool.py",
      "type": "module"
    },
    {
      "source": "__init__.py",
      "destination": "__init__.py",
      "type": "init_file"
    }
  ],
  "target_directory_key": "tools",
  "python_dependencies": [
    {
      "name": "exa-py",
      "version": ">=1.0.0"
    },
    {
      "name": "pydantic",
      "version": ">=2.0.0"
    }
  ],
  "registry_dependencies": [],
  "environment_variables": [
    {
      "name": "EXA_API_KEY",
      "description": "API key for Exa services. Get it from https://exa.ai",
      "required": true
    }
  ],
  "example_usage": "```python\nimport asyncio\nfrom exa_search_tools import exa_search, exa_answer, exa_find_similar, SearchArgs, AnswerArgs, FindSimilarArgs\n\nasync def main():\n    # Neural search with category filter\n    search_args = SearchArgs(\n        query=\"Latest breakthroughs in quantum computing\",\n        max_results=5,\n        search_type=\"neural\",\n        category=\"research paper\",\n        start_published_date=\"2023-01-01\"\n    )\n    search_results = await exa_search(search_args)\n    \n    print(f\"Search provider: {search_results.provider}\")\n    print(f\"Autoprompt suggestion: {search_results.autoprompt_string}\")\n    for result in search_results.results:\n        print(f\"Title: {result.title}\")\n        print(f\"URL: {result.url}\")\n        print(f\"Score: {result.score}\")\n        print(\"---\")\n    \n    # Get direct answer to a question\n    answer_args = AnswerArgs(\n        query=\"What are the main benefits of GraphQL over REST APIs?\",\n        include_citations=True\n    )\n    answer_result = await exa_answer(answer_args)\n    \n    print(f\"\\nAnswer: {answer_result.answer}\")\n    print(f\"\\nCitations:\")\n    for citation in answer_result.citations:\n        print(f\"- {citation.title} ({citation.url})\")\n    \n    # Find similar pages\n    similar_args = FindSimilarArgs(\n        url=\"https://openai.com/blog/gpt-4\",\n        max_results=5,\n        exclude_source_domain=True\n    )\n    similar_results = await exa_find_similar(similar_args)\n    \n    print(f\"\\nPages similar to GPT-4 announcement:\")\n    for result in similar_results.results:\n        print(f\"- {result.title} ({result.url})\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
  "post_add_instructions": "You now have access to Exa's AI-powered search capabilities! Set your EXA_API_KEY environment variable before using. Exa provides:\n\n1. **Neural Search** - Semantic search that understands context\n2. **Direct Answers** - Get answers with citations, not just links\n3. **Find Similar** - Discover related content based on any URL\n\nThe search function uses unified models compatible with other providers, while maintaining access to Exa's advanced features like categories, date filtering, and relevance scoring.",
  "tags": [
    "exa",
    "web_search",
    "ai_search",
    "neural_search",
    "semantic_search",
    "qa",
    "tools"
  ],
  "supports_lilypad": true,
  "template_variables": {},
  "mcp_compatible": false,
  "mcp_entrypoint": ""
}
