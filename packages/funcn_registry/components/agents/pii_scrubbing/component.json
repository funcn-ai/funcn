{
  "$schema": "https://funcn.ai/schemas/component.json",
  "name": "pii_scrubbing_agent",
  "version": "0.1.0",
  "description": "Agent for detecting and removing Personally Identifiable Information (PII) from text. Combines regex patterns and LLM analysis for comprehensive PII detection. Supports multiple scrubbing methods including masking, redaction, generalization, and synthetic data replacement.",
  "type": "agent",
  "authors": [
    {
      "name": "Funcn Project",
      "email": "info@funcn.ai"
    }
  ],
  "license": "MIT",
  "repository_url": "https://github.com/funcn-ai/funcn",
  "mirascope_version_min": "1.24.0",
  "files_to_copy": [
    {
      "source": "agent.py",
      "destination": "pii_scrubbing/agent.py",
      "type": "module"
    },
    {
      "source": "__init__.py",
      "destination": "pii_scrubbing/__init__.py",
      "type": "init_file"
    }
  ],
  "target_directory_key": "agents",
  "python_dependencies": [
    {
      "name": "mirascope",
      "version": ">=1.24.0"
    },
    {
      "name": "pydantic",
      "version": ">=2.0.0"
    },
    {
      "name": "lilypad",
      "version": ">=0.1.0"
    }
  ],
  "registry_dependencies": [],
  "environment_variables": [
    {
      "name": "OPENAI_API_KEY",
      "description": "API key for OpenAI services (if using OpenAI provider).",
      "required": false
    },
    {
      "name": "ANTHROPIC_API_KEY",
      "description": "API key for Anthropic services (if using Anthropic provider).",
      "required": false
    },
    {
      "name": "GOOGLE_API_KEY",
      "description": "API key for Google services (if using Google provider).",
      "required": false
    }
  ],
  "example_usage": "```python\nimport asyncio\nfrom pii_scrubbing import (\n    scrub_pii_from_text,\n    quick_scrub,\n    detect_pii_only,\n    scrub_with_mapping\n)\n\nasync def main():\n    # Sample text with PII\n    text = \"\"\"John Doe's email is john.doe@example.com and his phone is 555-123-4567.\n    His SSN is 123-45-6789 and he lives at 123 Main St, Anytown, USA.\n    Credit card: 4111111111111111, IP: 192.168.1.1\"\"\"\n    \n    # Full PII scrubbing with hybrid detection\n    result = await scrub_pii_from_text(\n        text=text,\n        detection_method=\"hybrid\",\n        scrubbing_method=\"mask\"\n    )\n    print(f\"Original: {result.original_text}\")\n    print(f\"\\nScrubbed: {result.scrubbed_text}\")\n    print(f\"\\nEntities removed: {len(result.entities_removed)}\")\n    for entity in result.entities_removed:\n        print(f\"  - {entity.entity_type}: {entity.text} (confidence: {entity.confidence})\")\n    \n    # Quick scrub with defaults\n    quick_result = await quick_scrub(text)\n    print(f\"\\nQuick scrub result: {quick_result}\")\n    \n    # Detection only (no scrubbing)\n    detection = await detect_pii_only(text, method=\"hybrid\")\n    print(f\"\\nPII Detection: {detection}\")\n    \n    # Scrub with synthetic data and mapping\n    scrubbed_text, mapping = await scrub_with_mapping(\n        text=text,\n        scrubbing_method=\"synthetic\"\n    )\n    print(f\"\\nSynthetic scrubbing: {scrubbed_text}\")\n    print(f\"Mapping: {mapping}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```",
  "post_add_instructions": "This agent detects and removes PII using hybrid approaches. Detection methods: 'regex' (fast pattern matching), 'llm' (context-aware detection), or 'hybrid' (both). Scrubbing methods: 'mask' (generic placeholders), 'redact' (asterisks), 'generalize' (less specific), or 'synthetic' (fake but realistic data). The agent handles various PII types including names, emails, phones, SSNs, credit cards, addresses, and more. Set your preferred LLM provider's API key.",
  "tags": [
    "pii",
    "privacy",
    "data_protection",
    "agent",
    "mirascope",
    "text_processing",
    "regex",
    "gdpr",
    "compliance",
    "lilypad"
  ],
  "supports_lilypad": true,
  "template_variables": {
    "provider": "openai",
    "model": "gpt-4o-mini",
    "detection_method": "hybrid",
    "scrubbing_method": "mask"
  },
  "mcp_compatible": false,
  "mcp_entrypoint": ""
}