{
  "$schema": "https://funcn.ai/schemas/component.json",
  "name": "dataset_builder",
  "version": "0.1.0",
  "description": "AI-powered dataset builder that creates curated data collections using Exa Websets with custom criteria and enrichments",
  "type": "agent",
  "authors": [
    {
      "name": "Funcn Project",
      "email": "info@funcn.ai"
    }
  ],
  "license": "MIT",
  "repository_url": "https://github.com/funcn-ai/funcn",
  "mirascope_version_min": "1.24.0",
  "files_to_copy": [
    {
      "source": "agent.py",
      "destination": "agent.py",
      "type": "module"
    },
    {
      "source": "__init__.py",
      "destination": "__init__.py",
      "type": "init_file"
    }
  ],
  "target_directory_key": "agents",
  "python_dependencies": [
    {
      "name": "mirascope[openai]",
      "version": ">=1.24.0"
    },
    {
      "name": "pydantic",
      "version": ">=2.0.0"
    },
    {
      "name": "exa-py",
      "version": ">=1.0.0"
    }
  ],
  "registry_dependencies": [
    "exa_websets"
  ],
  "environment_variables": [
    {
      "name": "EXA_API_KEY",
      "description": "API key for Exa services",
      "required": true
    },
    {
      "name": "OPENAI_API_KEY",
      "description": "API key for OpenAI services",
      "required": true
    }
  ],
  "example_usage": "```python\nfrom ai_agents.dataset_builder import (\n    build_dataset, build_company_dataset, build_competitor_dataset,\n    build_influencer_dataset, build_investment_dataset\n)\n\nasync def main():\n    # Build a general dataset\n    dataset = await build_dataset(\n        topic=\"AI startups\",\n        entity_type=\"company\",\n        target_count=100\n    )\n    print(f\"Dataset created: {dataset.name}\")\n    print(f\"Items collected: {dataset.status.items_found}\")\n    \n    # Build a competitor analysis dataset\n    competitor_data = await build_competitor_dataset(\n        company_name=\"OpenAI\",\n        industry=\"AI\",\n        aspects=[\"products\", \"pricing\", \"strategy\"]\n    )\n    \n    # Find influencers in a niche\n    influencers = await build_influencer_dataset(\n        niche=\"AI and machine learning\",\n        platforms=[\"twitter\", \"linkedin\"],\n        min_followers=50000\n    )\n    \n    # Investment opportunities\n    investments = await build_investment_dataset(\n        sector=\"healthtech\",\n        investment_stage=\"Series A\",\n        geography=\"United States\"\n    )\n```",
  "post_add_instructions": "You can now import the dataset builder with `from ai_agents.dataset_builder import build_dataset`. Make sure to set your EXA_API_KEY and OPENAI_API_KEY environment variables.\n\nThe agent provides specialized dataset builders:\n\n**Core Functions:**\n- `build_dataset()` - General dataset building with custom criteria\n- `build_company_dataset()` - Company information and analysis\n- `build_research_dataset()` - Academic papers and research\n\n**Market Intelligence:**\n- `build_market_dataset()` - Market analysis and trends\n- `build_competitor_dataset()` - Competitive landscape analysis\n- `build_news_trends_dataset()` - News monitoring and sentiment\n\n**Business Development:**\n- `build_influencer_dataset()` - Social media influencer discovery\n- `build_investment_dataset()` - Investment opportunities\n- `build_talent_dataset()` - Recruiting and talent sourcing\n- `build_product_launch_dataset()` - Product launch tracking\n- `build_location_dataset()` - Location/real estate analysis\n\nDatasets are built asynchronously using Exa Websets. Monitor progress in real-time or run in background. For optional tracing, install lilypad: `pip install lilypad`.",
  "tags": [
    "dataset",
    "exa",
    "websets",
    "data-collection",
    "enrichment",
    "market-research",
    "competitive-intelligence",
    "business-intelligence"
  ],
  "supports_lilypad": true,
  "template_variables": {
    "provider": "openai",
    "model": "gpt-4o-mini",
    "default_entity_type": "general",
    "default_target_count": 50,
    "default_wait_for_completion": true,
    "default_max_wait_minutes": 30
  },
  "mcp_compatible": false,
  "mcp_entrypoint": ""
}
