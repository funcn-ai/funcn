version: "3.0"

set: ['e', 'u', 'pipefail']
shopt: ['globstar']

env:
  COMPOSE_FILE: "{{.TLD}}/docker-compose.yml"
  COMPOSE_REMOVE_ORPHANS: true
  DOCKERFILE: "{{.TLD}}/Dockerfile"
  ARCH: "linux/amd64"
  REGISTRY: "ghcr.io"
  USER_NAME: "greyhaven-ai"
  SERVICE: "sygaldry"
  VERSION: "0.1.0"

tasks:
  net:
    desc: "Create docker network"
    cmds:
      - |
        docker network create \
          --driver bridge \
          app-tier
    status:
      - |
        docker network ls --format {{.Name}} \
          | grep -q '^app-tier$'

  vol:
    desc: "Create docker volume"
    cmds:
      - |
        docker volume create \
          --driver local \
          {{.SERVICE}}-vol
    status:
      - |
        docker volume ls --format {{.Name}} \
          | grep -q '^{{.SERVICE}}-vol$'

  build:
    desc: "Build the docker image"
    summary: |
      Build the docker image with the specified dockerfile.

      The default dockerfile is `Dockerfile`.

      USAGE
        task docker:build
    cmds:
      - |
        docker build \
          -f {{.DOCKERFILE}} \
          -t {{.SERVICE}} \
          --platform {{.ARCH}} \
          .

  login:
    desc: "Login to the container registry"
    cmds:
      - |
        echo "{{.REGISTRY_PASS}}" | docker login \
          -u {{.USER_NAME}} \
          --password-stdin {{.REGISTRY_URL}}
    run: once
    silent: true
    status:
      - |
        jq -e '.auths | keys[] | select(contains("{{.REGISTRY_URL}}"))' ~/.docker/config.json

  push:
    desc: "Push the docker image to the registry"
    deps:
      - login
      - build
    cmds:
      - docker push {{.REGISTRY_URL}}/{{.USER_NAME}}/{{.SERVICE}}

  up:
    desc: "Start the project with docker compose"
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} up -d

  exec:
    desc: "Shell into a running container"
    cmds:
      - docker exec -it {{.SERVICE}} sh

  logs:
    desc: "Follow the logs of a running container"
    cmds:
      - docker compose logs -tf {{.SERVICE}}

  stop:
    desc: "Stop the project with docker compose"
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} stop

  down:
    desc: "Stop and remove containers, networks, and volumes with docker compose"
    cmds:
      - |
        docker compose -f {{.COMPOSE_FILE}} down \
          --volumes \
          --remove-orphans

  prune:
    desc: "Prune docker"
    cmds:
      - docker system prune --all --force
      - docker builder prune --all --force

  validate:
    desc: Validate the docker-bake.hcl file
    vars:
      BAKE_OUTPUT:
        sh: docker buildx bake --file docker-bake.hcl --print 2>&1 || true
      VALIDATION_ERROR:
        sh: echo "{{.BAKE_OUTPUT}}" | grep -q "ERROR:" && echo "true" || echo "false"
    preconditions:
      - sh: "test {{.VALIDATION_ERROR}} = false"
        msg: |
          Docker bake file is invalid. Error details:
          {{.BAKE_OUTPUT}}
    cmds:
      - cmd: echo "Docker bake file is valid"
        silent: true
